import Header from "@/components/Header";
import Avatar from "@mui/material/Avatar";
import Badge from "@mui/material/Badge";
import Box from "@mui/material/Box";
import CssBaseline from "@mui/material/CssBaseline";
import Divider from "@mui/material/Divider";
import Fab from "@mui/material/Fab";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemAvatar from "@mui/material/ListItemAvatar";
import ListItemText from "@mui/material/ListItemText";
import Paper from "@mui/material/Paper";
import Typography from "@mui/material/Typography";
import { styled } from "@mui/material/styles";
import * as React from "react";

const messages = [
  {
    id: 1,
    primary: "Brunch this week?",
    secondary:
      "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    person: "/static/images/avatar/5.jpg",
    time: "2022-12-13 22:14",
    totalUnreadMessages: 5,
  },
  {
    id: 2,
    primary: "Birthday Gift",
    secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    person: "/static/images/avatar/1.jpg",
    time: "2022-12-13 22:14",
    totalUnreadMessages: 5,
  },
  {
    id: 3,
    primary: "Recipe to try",
    secondary:
      "I am try out this new BBQ recipe, I think this might be amazing",
    person: "/static/images/avatar/2.jpg",
    time: "2022-12-13 22:14",
    totalUnreadMessages: 5,
  },
  {
    id: 4,
    primary: "Yes!",
    secondary: "I have the tickets to the ReactConf for this year.",
    person: "/static/images/avatar/3.jpg",
    time: "2022-12-13 22:14",
    totalUnreadMessages: 5,
  },
  {
    id: 5,
    primary: "Doctor's Appointment",
    secondary:
      "My appointment for the doctor was rescheduled for next Saturday.",
    person: "/static/images/avatar/4.jpg",
    time: "2022-12-13 22:14",
    totalUnreadMessages: 5,
  },
  {
    id: 6,
    primary: "Discussion",
    secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    person: "/static/images/avatar/5.jpg",
    time: "2022-12-13 22:14",
    totalUnreadMessages: 0,
  },
  {
    id: 7,
    primary: "Summer BBQ",
    secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    person: "/static/images/avatar/1.jpg",
    time: "2022-12-13 22:14",
    totalUnreadMessages: 999999,
  },
];

const StyledFab = styled(Fab)({
  position: "absolute",
  zIndex: 1,
  top: -30,
  left: 0,
  right: 0,
  margin: "0 auto",
});

const hideScrollbar = {
  "&::-webkit-scrollbar": {
    display: "none",
  },
  scrollbarWidth: "none",
};

export default function BottomAppBar() {
  return (
    <React.Fragment>
      <CssBaseline />
      <Paper square sx={{ pb: "50px", overflowY: "scroll", ...hideScrollbar }}>
        <Header roomName="聊天室列表" onBackButtonClick={() => {}} />
        <List sx={{ mb: 2 }}>
          {messages.map(
            (
              { id, primary, secondary, person, time, totalUnreadMessages },
              index
            ) => {
              const hasUnreadMessages = totalUnreadMessages > 0;
              return (
                <React.Fragment key={id}>
                  <ListItem
                    button
                    sx={{
                      "&:hover": {
                        backgroundColor: "rgba(0, 0, 0, 0.1)",
                      },
                    }}
                  >
                    <ListItemAvatar>
                      <Avatar alt="Profile Picture" src={person} />
                    </ListItemAvatar>
                    <ListItemText
                      primary={
                        <Box
                          sx={{
                            display: "flex",
                            alignItems: "center",
                          }}
                        >
                          <Typography
                            component="span"
                            variant="body2"
                            color="text.primary"
                            noWrap
                            overflow="hidden"
                            textOverflow="ellipsis"
                            sx={{
                              fontWeight: hasUnreadMessages ? "bold" : "normal",
                            }}
                          >
                            {primary}
                          </Typography>
                          {hasUnreadMessages && (
                            <Badge
                              badgeContent={totalUnreadMessages}
                              color="error"
                              sx={{ marginLeft: "8px" }}
                            >
                              <Box sx={{ width: "10px" }} />
                            </Badge>
                          )}
                        </Box>
                      }
                      secondary={
                        <React.Fragment>
                          <Typography
                            component="span"
                            variant="body2"
                            color="text.primary"
                            sx={{
                              display: "-webkit-box",
                              WebkitBoxOrient: "vertical",
                              WebkitLineClamp: 1,
                              overflow: "hidden",
                              textOverflow: "ellipsis",
                              fontWeight: hasUnreadMessages ? "bold" : "normal",
                            }}
                          >
                            {secondary}
                          </Typography>
                          <Typography
                            component="span"
                            variant="body2"
                            color="text.secondary"
                            display="block"
                          >
                            {time}
                          </Typography>
                        </React.Fragment>
                      }
                    />
                  </ListItem>
                  {index !== messages.length - 1 && (
                    <Divider variant="inset" component="li" />
                  )}
                </React.Fragment>
              );
            }
          )}
        </List>
      </Paper>
    </React.Fragment>
  );
}
